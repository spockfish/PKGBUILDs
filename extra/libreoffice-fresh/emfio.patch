From 126f10840b0e5930be57cb55262789e85bff9b21 Mon Sep 17 00:00:00 2001
From: Stephan Bergmann <sbergman@redhat.com>
Date: Fri, 12 Jan 2018 20:24:43 +0100
Subject: More loplugin:cstylecast: emfio

auto-rewrite with <https://gerrit.libreoffice.org/#/c/47798/> "Enable
loplugin:cstylecast for some more cases" plus
solenv/clang-format/reformat-formatted-files

Change-Id: Idffd3ef04b007f04b7022e54881254da9b2aa4a0
---
 emfio/qa/cppunit/emf/EmfImportTest.cxx |  6 +++---
 emfio/source/reader/emfreader.cxx      |  8 ++++----
 emfio/source/reader/mtftools.cxx       | 26 +++++++++++++-------------
 emfio/source/reader/wmfreader.cxx      | 12 ++++++------
 4 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/emfio/qa/cppunit/emf/EmfImportTest.cxx b/emfio/qa/cppunit/emf/EmfImportTest.cxx
index bc14c4b..9611db6 100644
--- a/emfio/qa/cppunit/emf/EmfImportTest.cxx
+++ b/emfio/qa/cppunit/emf/EmfImportTest.cxx
@@ -88,7 +88,7 @@ void Test::checkRectPrimitive(Primitive2DSequence const & rPrimitive)
 void Test::testWorking()
 {
     Primitive2DSequence aSequenceRect = parseEmf("/emfio/qa/cppunit/emf/data/fdo79679-2.emf");
-    CPPUNIT_ASSERT_EQUAL(1, (int) aSequenceRect.getLength());
+    CPPUNIT_ASSERT_EQUAL(1, static_cast<int>(aSequenceRect.getLength()));
     checkRectPrimitive(aSequenceRect);
 }
 
@@ -99,7 +99,7 @@ void Test::TestDrawString()
 
     // first, get the sequence of primitives and dump it
     Primitive2DSequence aSequence = parseEmf("/emfio/qa/cppunit/emf/data/TestDrawString.emf");
-    CPPUNIT_ASSERT_EQUAL(1, (int) aSequence.getLength());
+    CPPUNIT_ASSERT_EQUAL(1, static_cast<int>(aSequence.getLength()));
     Primitive2dXmlDump dumper;
     xmlDocPtr pDocument = dumper.dumpAndParse(comphelper::sequenceToContainer<Primitive2DContainer>(aSequence));
     CPPUNIT_ASSERT (pDocument);
@@ -120,7 +120,7 @@ void Test::TestDrawLine()
 
     // first, get the sequence of primitives and dump it
     Primitive2DSequence aSequence = parseEmf("/emfio/qa/cppunit/emf/data/TestDrawLine.emf");
-    CPPUNIT_ASSERT_EQUAL(1, (int) aSequence.getLength());
+    CPPUNIT_ASSERT_EQUAL(1, static_cast<int>(aSequence.getLength()));
     Primitive2dXmlDump dumper;
     xmlDocPtr pDocument = dumper.dumpAndParse(comphelper::sequenceToContainer<Primitive2DContainer>(aSequence));
     CPPUNIT_ASSERT (pDocument);
diff --git a/emfio/source/reader/emfreader.cxx b/emfio/source/reader/emfreader.cxx
index 52e8661..ea557ea 100644
--- a/emfio/source/reader/emfreader.cxx
+++ b/emfio/source/reader/emfreader.cxx
@@ -590,7 +590,7 @@ namespace emfio
         {
             sal_uInt32 nPoints(0);
             mpInputStream->ReadUInt32( nPoints );
-            aPoints[i] = (sal_uInt16)nPoints;
+            aPoints[i] = static_cast<sal_uInt16>(nPoints);
         }
         if ( mpInputStream->good() && ( nGesPoints * (sizeof(T)+sizeof(T)) ) <= ( nEndPos - mpInputStream->Tell() ) )
         {
@@ -681,7 +681,7 @@ namespace emfio
 
                     mpInputStream->ReadUInt32( nCommentId );
 
-                    SAL_INFO ("emfio", "\t\tbegin " << (char)(nCommentId & 0xff) << (char)((nCommentId & 0xff00) >> 8) << (char)((nCommentId & 0xff0000) >> 16) << (char)((nCommentId & 0xff000000) >> 24) << " id: 0x" << std::hex << nCommentId << std::dec);
+                    SAL_INFO ("emfio", "\t\tbegin " << static_cast<char>(nCommentId & 0xff) << static_cast<char>((nCommentId & 0xff00) >> 8) << static_cast<char>((nCommentId & 0xff0000) >> 16) << static_cast<char>((nCommentId & 0xff000000) >> 24) << " id: 0x" << std::hex << nCommentId << std::dec);
 
                     if( nCommentId == EMR_COMMENT_EMFPLUS && nRecSize >= 12 )
                     {
@@ -761,7 +761,7 @@ namespace emfio
                     {
                         mpInputStream->ReadUInt32( nNom1 ).ReadUInt32( nDen1 ).ReadUInt32( nNom2 ).ReadUInt32( nDen2 );
                         if (nDen1 != 0 && nDen2 != 0)
-                            ScaleWinExt( (double)nNom1 / nDen1, (double)nNom2 / nDen2 );
+                            ScaleWinExt( static_cast<double>(nNom1) / nDen1, static_cast<double>(nNom2) / nDen2 );
                         else
                             SAL_WARN("vcl.emf", "ignoring bogus divide by zero");
                     }
@@ -778,7 +778,7 @@ namespace emfio
                     {
                         mpInputStream->ReadUInt32( nNom1 ).ReadUInt32( nDen1 ).ReadUInt32( nNom2 ).ReadUInt32( nDen2 );
                         if (nDen1 != 0 && nDen2 != 0)
-                            ScaleDevExt( (double)nNom1 / nDen1, (double)nNom2 / nDen2 );
+                            ScaleDevExt( static_cast<double>(nNom1) / nDen1, static_cast<double>(nNom2) / nDen2 );
                         else
                             SAL_WARN("vcl.emf", "ignoring bogus divide by zero");
                     }
diff --git a/emfio/source/reader/mtftools.cxx b/emfio/source/reader/mtftools.cxx
index 55fd4dd..e3bbb5f 100644
--- a/emfio/source/reader/mtftools.cxx
+++ b/emfio/source/reader/mtftools.cxx
@@ -272,7 +272,7 @@ namespace emfio
         if( rFont.lfStrikeOut )
             aFont.SetStrikeout( STRIKEOUT_SINGLE );
 
-        aFont.SetOrientation( (short)rFont.lfEscapement );
+        aFont.SetOrientation( static_cast<short>(rFont.lfEscapement) );
 
         Size aFontSize( Size( rFont.lfWidth, rFont.lfHeight ) );
         if ( rFont.lfHeight > 0 )
@@ -287,8 +287,8 @@ namespace emfio
             long nHeight = aMetric.GetAscent() + aMetric.GetDescent();
             if (nHeight)
             {
-                double fHeight = ((double)aFontSize.Height() * rFont.lfHeight ) / nHeight;
-                aFontSize.Height() = (sal_Int32)( fHeight + 0.5 );
+                double fHeight = (static_cast<double>(aFontSize.Height()) * rFont.lfHeight ) / nHeight;
+                aFontSize.Height() = static_cast<sal_Int32>( fHeight + 0.5 );
             }
         }
 
@@ -303,7 +303,7 @@ namespace emfio
         sal_uInt32 nColor;
 
         mpInputStream->ReadUInt32( nColor );
-        return Color( (sal_uInt8)nColor, (sal_uInt8)( nColor >> 8 ), (sal_uInt8)( nColor >> 16 ) );
+        return Color( static_cast<sal_uInt8>(nColor), static_cast<sal_uInt8>( nColor >> 8 ), static_cast<sal_uInt8>( nColor >> 16 ) );
     };
 
     Point MtfTools::ImplScale(const Point& rPoint) // Hack to set varying defaults for incompletely defined files.
@@ -394,8 +394,8 @@ namespace emfio
                             fY2 *= mnDevHeight;
                             fX2 += mnDevOrgX;
                             fY2 += mnDevOrgY;   // fX2, fY2 now in device units
-                            fX2 *= (double)mnMillX * 100.0 / (double)mnPixX;
-                            fY2 *= (double)mnMillY * 100.0 / (double)mnPixY;
+                            fX2 *= static_cast<double>(mnMillX) * 100.0 / static_cast<double>(mnPixX);
+                            fY2 *= static_cast<double>(mnMillY) * 100.0 / static_cast<double>(mnPixY);
                         }
                     }
                     break;
@@ -482,8 +482,8 @@ namespace emfio
                             fHeight /= mnWinExtY;
                             fWidth *= mnDevWidth;
                             fHeight *= mnDevHeight;
-                            fWidth *= (double)mnMillX * 100.0 / (double)mnPixX;
-                            fHeight *= (double)mnMillY * 100.0 / (double)mnPixY;
+                            fWidth *= static_cast<double>(mnMillX) * 100.0 / static_cast<double>(mnPixX);
+                            fHeight *= static_cast<double>(mnMillY) * 100.0 / static_cast<double>(mnPixY);
                         }
                     }
                     break;
@@ -558,7 +558,7 @@ namespace emfio
     {
         if ( nIndex & ENHMETA_STOCK_OBJECT )
         {
-            sal_uInt16 nStockId = (sal_uInt8)nIndex;
+            sal_uInt16 nStockId = static_cast<sal_uInt8>(nIndex);
             switch( nStockId )
             {
                 case WHITE_BRUSH :
@@ -617,7 +617,7 @@ namespace emfio
 
             GDIObj *pGDIObj = nullptr;
 
-            if ( (sal_uInt32)nIndex < mvGDIObj.size() )
+            if ( static_cast<sal_uInt32>(nIndex) < mvGDIObj.size() )
                 pGDIObj = mvGDIObj[ nIndex ].get();
 
             if ( pGDIObj )
@@ -760,7 +760,7 @@ namespace emfio
                     }
                 }
             }
-            if ( (sal_uInt32)nIndex >= mvGDIObj.size() )
+            if ( static_cast<sal_uInt32>(nIndex) >= mvGDIObj.size() )
                 ImplResizeObjectArry( nIndex + 16 );
 
             mvGDIObj[ nIndex ] = std::move(pObject);
@@ -776,7 +776,7 @@ namespace emfio
     {
         if ( ( nIndex & ENHMETA_STOCK_OBJECT ) == 0 )
         {
-            if ( (sal_uInt32)nIndex < mvGDIObj.size() )
+            if ( static_cast<sal_uInt32>(nIndex) < mvGDIObj.size() )
             {
                 mvGDIObj[ nIndex ].reset();
             }
@@ -1738,7 +1738,7 @@ namespace emfio
                 pSave = rSaveList[i].get();
 
                 sal_uInt32  nWinRop = pSave->nWinRop;
-                sal_uInt8   nRasterOperation = (sal_uInt8)( nWinRop >> 16 );
+                sal_uInt8   nRasterOperation = static_cast<sal_uInt8>( nWinRop >> 16 );
 
                 sal_uInt32  nUsed =  0;
                 if ( ( nRasterOperation & 0xf )  != ( nRasterOperation >> 4 ) )
diff --git a/emfio/source/reader/wmfreader.cxx b/emfio/source/reader/wmfreader.cxx
index 7a925e7..e20576c 100644
--- a/emfio/source/reader/wmfreader.cxx
+++ b/emfio/source/reader/wmfreader.cxx
@@ -244,7 +244,7 @@ namespace emfio
                     mpInputStream->SetError( SVSTREAM_FILEFORMAT_ERROR );
                     break;
                 }
-                ScaleWinExt( (double)nXNum / nXDenom, (double)nYNum / nYDenom );
+                ScaleWinExt( static_cast<double>(nXNum) / nXDenom, static_cast<double>(nYNum) / nYDenom );
             }
             break;
 
@@ -269,7 +269,7 @@ namespace emfio
                     mpInputStream->SetError( SVSTREAM_FILEFORMAT_ERROR );
                     break;
                 }
-                ScaleDevExt( (double)nXNum / nXDenom, (double)nYNum / nYDenom );
+                ScaleDevExt( static_cast<double>(nXNum) / nXDenom, static_cast<double>(nYNum) / nYDenom );
             }
             break;
 
@@ -796,7 +796,7 @@ namespace emfio
                         nCount++;
                     pBmp.reset();
                 }
-                Color aColor( (sal_uInt8)( nRed / nCount ), (sal_uInt8)( nGreen / nCount ), (sal_uInt8)( nBlue / nCount ) );
+                Color aColor( static_cast<sal_uInt8>( nRed / nCount ), static_cast<sal_uInt8>( nGreen / nCount ), static_cast<sal_uInt8>( nBlue / nCount ) );
                 CreateObject(o3tl::make_unique<WinMtfFillStyle>( aColor, false ));
             }
             break;
@@ -1107,7 +1107,7 @@ namespace emfio
                                 }
                             }
                         }
-                        else if ( (nNewMagic == static_cast< sal_uInt32 >(0x43464D57)) && (nLen >= 34) && ( (sal_Int32)(nLen + 10) <= (sal_Int32)(mnRecSize * 2) ))
+                        else if ( (nNewMagic == static_cast< sal_uInt32 >(0x43464D57)) && (nLen >= 34) && ( static_cast<sal_Int32>(nLen + 10) <= static_cast<sal_Int32>(mnRecSize * 2) ))
                         {
                             sal_uInt32 nComType = 0, nVersion = 0, nFlags = 0, nComRecCount = 0,
                                        nCurRecSize = 0, nRemainingSize = 0, nEMFTotalSize = 0;
@@ -1252,8 +1252,8 @@ namespace emfio
             {
                 // #n417818#: If we have an external header then overwrite the bounds!
                 tools::Rectangle aExtRect(0, 0,
-                    (double)mpExternalHeader->xExt * 567 * mnUnitsPerInch / 1440000,
-                    (double)mpExternalHeader->yExt * 567 * mnUnitsPerInch / 1440000);
+                    static_cast<double>(mpExternalHeader->xExt) * 567 * mnUnitsPerInch / 1440000,
+                    static_cast<double>(mpExternalHeader->yExt) * 567 * mnUnitsPerInch / 1440000);
                 aPlaceableBound = aExtRect;
 
                 SAL_INFO("vcl.wmf", "External header size "
-- 
cgit v1.1

From 769ad348b0008d2879333a29a5570e185a9b5937 Mon Sep 17 00:00:00 2001
From: Stephan Bergmann <sbergman@redhat.com>
Date: Mon, 15 Jan 2018 09:05:51 +0100
Subject: More loplugin:cstylecast: emfio

Change-Id: I52e540bdd8ba0090dec752deb7b1fa5c67ae3c85
---
 emfio/source/reader/emfreader.cxx | 2 +-
 emfio/source/reader/wmfreader.cxx | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/emfio/source/reader/emfreader.cxx b/emfio/source/reader/emfreader.cxx
index 8e9b6b5..d1873c7 100644
--- a/emfio/source/reader/emfreader.cxx
+++ b/emfio/source/reader/emfreader.cxx
@@ -823,7 +823,7 @@ namespace emfio
                     case EMR_SETROP2 :
                     {
                         mpInputStream->ReadUInt32( nDat32 );
-                        SetRasterOp( (WMFRasterOp)nDat32 );
+                        SetRasterOp( static_cast<WMFRasterOp>(nDat32) );
                     }
                     break;
 
diff --git a/emfio/source/reader/wmfreader.cxx b/emfio/source/reader/wmfreader.cxx
index 21f0bd2..5b4353f 100644
--- a/emfio/source/reader/wmfreader.cxx
+++ b/emfio/source/reader/wmfreader.cxx
@@ -203,7 +203,7 @@ namespace emfio
             {
                 sal_uInt16 nROP2 = 0;
                 mpInputStream->ReadUInt16( nROP2 );
-                SetRasterOp( (WMFRasterOp)nROP2 );
+                SetRasterOp( static_cast<WMFRasterOp>(nROP2) );
             }
             break;
 
@@ -986,7 +986,7 @@ namespace emfio
                 WMFRasterOp nOldROP = WMFRasterOp::NONE;
                 mpInputStream->ReadUInt32( nROP );
                 Size aSize = ReadYXExt();
-                nOldROP = SetRasterOp( (WMFRasterOp)nROP );
+                nOldROP = SetRasterOp( static_cast<WMFRasterOp>(nROP) );
                 DrawRect( tools::Rectangle( ReadYX(), aSize ), false );
                 SetRasterOp( nOldROP );
             }
-- 
cgit v1.1


